# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import subprocess
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import ttk, Frame, Tk, Canvas, Entry, Text, Button, PhotoImage, BOTH, YES, NO, W
from pandastable import Table
import psycopg2
import pandas as pd

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0"



def fetch_data():
    try:
        # Connect to postgres DB
        connection = psycopg2.connect(
            dbname="test",
            user="postgres",
            password="mrrobot",
            host="localhost"
        )

        # Open a cursor to perform database operations
        cur = connection.cursor()

        # Execute a query
        cur.execute("SELECT * FROM student")

        # Retrieve query results
        records = cur.fetchall()

        # Get the column names for the DataFrame
        colnames = [desc[0] for desc in cur.description]

        # Close the connection and cursor
        cur.close()
        connection.close()

        return pd.DataFrame(records, columns=colnames)

    except psycopg2.Error as e:
        print(f"An error occurred while fetching data: {e}")

def show_new_window():
    window.destroy()
    subprocess.run(['python', '../HomeGUI/Home.py'])

def show_table(data, root):
    # create frame
    frame = Frame(root, width=1119, height=518, bg="white")
    frame.place(x=87, y=157)  # place the frame according to your layout

    # create Treeview with scrollbars
    table = ttk.Treeview(frame, height=10)  # Set the height to the number of rows you want visible
    table["show"] = "headings"  # Set the height to the number of rows you want visible
    table.place(relheight=1, relwidth=1)  # Make the table fill the frame

    # create scrollbars and assign the command to treeview yview and xview
    vsb = ttk.Scrollbar(frame, orient="vertical", command=table.yview)
    vsb.place(relx=0.981, rely=0.02, relheight=0.960)

    hsb = ttk.Scrollbar(frame, orient="horizontal", command=table.xview)
    hsb.place(relx=0.020, rely=0.981, relwidth=0.959)

    table.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)

    table["columns"] = ("one", "two", "three", "four", "five", "six", "seven")
    table.column("one", width=160)  # adjust the width to suit your needs
    table.column("two", width=160)
    table.column("three", width=160)
    table.column("four", width=160)
    table.column("five", width=160)
    table.column("six", width=160)
    table.column("seven", width=160)

    table.heading("one", text="ID")
    table.heading("two", text="First Name")
    table.heading("three", text="Last Name")
    table.heading("four", text="Birth Date")
    table.heading("five", text="Email")
    table.heading("six", text="Phone Number")
    table.heading("seven", text="Country")

    # Inserting the data
    # Inserting the data
    for _, row in data.iterrows():
        row = list(row)
        row[3] = row[3].strftime('%Y-%m-%d')  # formatting date
        table.insert('', 'end', values=[str(e) for e in row])


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1280x832")
window.configure(bg="#FFFFFF")

canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=832,
    width=1280,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    640.0,
    416.0,
    image=image_image_1
)

canvas.create_text(
    169.0,
    69.0,
    anchor="nw",
    text="WELCOME TO STUDENT MANAGEMENT SYSTEM",
    fill="#1E1E1E",
    font=("Inter", 40 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_new_window(),
    relief="flat"
)
button_1.place(
    x=47.0,
    y=732.0,
    width=243.0,
    height=43.7293701171875
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: window.destroy(),
    relief="flat"
)
button_2.place(
    x=989.0,
    y=732.0,
    width=243.0,
    height=43.7293701171875
)

window.resizable(False, False)

data = fetch_data()
show_table(data, canvas)

window.mainloop()
